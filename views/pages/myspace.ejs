<!DOCTYPE html>
<html lang="en">
	<head>
		<%- include('../partials/head'); %>
		<style>
			.draggable {
				cursor: move;
			}

			.draggable.dragging {
				opacity: 0.5;
			}
			.preview-image {
				height: auto;
				width: 5vw;
			}
			.preview-folder {
				font-size: 4vw;
			}
			#tabelPlace tr {
				cursor: pointer;
			}
		</style>
	</head>
	<header><%- include('../partials/header'); %></header>
	<body>
		<main id="content" class="container py-1">
			<div class="modal fade" id="createFolderModal" tabindex="-1" aria-hidden="true">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title">Create Folder</h5>
							<button
								type="button"
								class="btn-close"
								data-bs-dismiss="modal"
								aria-label="Close"
							></button>
						</div>
						<div class="modal-body">
							<form id="createFolder">
								<div id="createFolderAlert" class="alert"></div>
								<div class="row">
									<div class="col-1"></div>
									<div class="col">
										<input
											type="text"
											required
											class="form-control"
											placeholder="Folder Name"
											name="name"
										/>
									</div>
									<div class="col-1" style="width: 2.333333%"></div>
									<div class="col-3">
										<button type="submit" class="btn btn-outline-success">Create</button>
									</div>
									<div class="col-1"></div>
								</div>
							</form>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						</div>
					</div>
				</div>
			</div>
			<div class="alert" id="genInfoAlert"></div>
			<nav aria-label="breadcrumb">
				<ol class="breadcrumb" id="breadCrumb"></ol>
			</nav>
			<div class="row">
				<div class="col">
					<table class="table">
						<thead>
							<tr>
								<th scope="col">Preview</th>
								<th scope="col">Name</th>
								<th scope="col">Actions</th>
							</tr>
						</thead>
						<tbody id="tabelPlace"></tbody>
					</table>
				</div>
				<div class="col-3">
					<button
						type="button"
						class="btn btn-outline-info"
						data-bs-toggle="modal"
						data-bs-target="#createFolderModal"
					>
						<i class="fas fa-folder-plus" style="font-size: 3vw"></i>
					</button>
				</div>
			</div>
		</main>
		<footer><%- include('../partials/footer'); %></footer>
	</body>
	<%- include('../partials/scripts'); %>
	<script src="dragDrop.js"></script>
	<script>
		let ROOTUUID;
		let viewDIR;

		let selected = [];

		function selectEntry(event, UUID) {
			if (selected.length > 0 && !event.ctrlKey) {
				selected.forEach((e) => {
					document.querySelector(`[data-entry-UUID="${e}"]`).classList.remove('table-info');
				});
				selected = [];
				redrawSelection();
			}

			const element = document.querySelector(`[data-entry-UUID="${UUID}"]`);
			if (element.classList.contains('table-info')) {
				//De Select
				removeItemFromArray(selected, UUID);
				element.classList.remove('table-info');
				redrawSelection();
			} else {
				//New Select
				element.classList.add('table-info');
				selected.push(UUID);
				redrawSelection();
			}
		}

		function redrawSelection() {
			//Here The Code for the redrawing selection
		}

		document.querySelector('#createFolder').addEventListener('submit', async (e) => {
			e.preventDefault();
			const alertSel = '#createFolderAlert';
			const data = formDataToObject(new FormData(e.target));
			data.parent_UUID = viewDIR;
			const response = await post('folder', JSON.stringify(data), true);
			if (!response.success) {
				alert(alertSel, response.success, response.error);
				return;
			}
			alert(
				alertSel,
				response.success,
				'Folder Created!',
				() => {
					init();
					// window.location.reload();
				},
				500
			);
		});

		function deleteEntry(UUID) {
			console.log('DELETE ENTRY ' + UUID);
			delSwal('Are you sure you want to delete this entry?', async (result) => {
				if (result.isConfirmed) {
					const response = await del('entry/' + UUID);
					if (!response.success) {
						Swal.fire(response.error, '', 'error');
					} else {
						Swal.fire('Deleted!', '', 'success');
					}
					init();
				}
			});
		}

		function deleteFolder(UUID) {
			console.log('DELETE FOLDER ' + UUID);
		}

		function changeDir(UUID) {
			const url = new URL(window.location.href);
			if (UUID) {
				url.searchParams.set('view', UUID);
			} else {
				url.searchParams.delete('view');
			}
			window.location.href = url.href;
		}

		async function loadEntrys() {
			const response = await get('entry/' + viewDIR);
			if (!response.success) {
				alert('#genInfoAlert', response.success, response.error);
				return;
			}
			response.json.forEach((entry) => {
				appendEntry(entry);
			});
		}

		function appendEntry(entry) {
			const tr = document.createElement('tr');
			tr.classList.add('draggable');
			tr.setAttribute('draggable', true);
			tr.setAttribute('data-entry-UUID', entry.UUID);
			tr.innerHTML = `<td onclick="selectEntry(event, '${
				entry.UUID
			}')"><img src="http://localhost:3100/image/${entry.UUID}?key=${getCookie(
				'auth-token'
			)}" class="img-thumbnail preview-image" /></td>
						<td onclick="selectEntry(event, '${entry.UUID}')">${entry.UUID.split('-')[0]}</td>
						<td><button onclick="deleteEntry('${
							entry.UUID
						}')" href="" class="btn btn-outline-danger"><i class="far fa-trash-alt" style="font-size: 4vh"></i></button></td>`;

			tabelPlace.appendChild(tr);
		}

		async function getRootFolder() {
			if (ROOTUUID) return ROOTUUID;
			const response = await get('folder');
			if (!response.success) {
				alert('#genInfoAlert', response.success, response.error);
				return;
			}
			response.json.forEach((dir) => {
				if (dir.name == 'ROOT') ROOTUUID = dir.UUID;
			});
			return ROOTUUID;
		}

		async function loadFolders() {
			const response = await get('folder/' + viewDIR);
			if (!response.success) {
				alert('#genInfoAlert', response.success, response.error);
				return;
			}
			response.json.forEach((dir) => {
				appendFolder(dir);
			});
		}

		function appendFolder(dir) {
			const tr = document.createElement('tr');
			tr.classList.add('draggable');
			tr.classList.add('place');
			tr.setAttribute('draggable', true);
			tr.setAttribute('data-folder-UUID', dir.UUID);
			tr.innerHTML = `<tr class="draggable place" draggable="true">
						<td onclick="changeDir('${dir.UUID}')"><i class="far fa-folder preview-folder"></i></td>
						<td onclick="changeDir('${dir.UUID}')">${dir.name}</td>
						<td>${
							dir.name == '...'
								? ''
								: '<button onclick="deleteFolder(\'' +
								  dir.UUID +
								  '\')" href="" class="btn btn-outline-danger"><i class="far fa-trash-alt" style="font-size: 4vh"></i></button>'
						}</td>
					</tr>`;
			tabelPlace.appendChild(tr);
		}

		async function init() {
			document.querySelector('#tabelPlace').innerHTML = '';
			if (getCookie('auth-token')) {
				viewDIR = getURLParam('view') ? getURLParam('view') : (await account).root_folder_UUID;
				if (!sessionStorage.getItem('path'))
					sessionStorage.setItem('path', JSON.stringify([{ UUID: viewDIR, name: 'ROOTI' }]));

				await loadFolders();
				await loadEntrys();
				fillBreadCrumb();
			}
			initDragDrop();
		}

		function fillBreadCrumb() {
			const li = document.createElement('li');
			li.classList.add('breadcrumb-item');
			li.innerHTML = `<a onclick="changeDir()" href="#">Rooti</a>`;
			document.querySelector('#breadCrumb').appendChild(li);
		}

		(async () => {
			await init();
		})();
	</script>
</html>
